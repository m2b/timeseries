// Code generated by IT Vizion OPCUACodeGenerator
// DO NOT MODIFY
package com.itvizion.timeseries;

import com.itvizion.timeseries.Describable;
import com.itvizion.timeseries.OPCQuality;

public enum OPCCode implements Describable {
    // Codes list - DO NOT REMOVE THIS LINE
    Good("0x00000000","The value is good. There are no special conditions"),
    Bad("0x80000000","The value is bad but no specific reason is known"),
    Uncertain("0x40000000",	"There is no specific reason why the value is uncertain."),
    BadUnexpectedError("0x80010000", "An unexpected error occurred"),
    BadResponseTooLarge("0x80B90000", "The response message size exceeds limits set by the client."),
    GoodNoData("0x00A50000", "No data exists for the requested time range or event filter."),
    GoodMoreData("0x00A60000", "The data or event field was successfully replaced in the historical database."),
    UncertainDataSubNormal("0x40A40000", "The value is derived from multiple values and has less than the required number of Good values."),
    UncertainDependentValueChanged("0x40E20000", "A dependent value has been changed but the change has not been applied to the device. The quality of the dominant variable is uncertain.");
    // End of codes list - DO NOT REMOVE THIS LINE

    // Constructor
    OPCCode(String hex, String description)
    {
        this.hex= coherceHex(hex);
        this.description=description;
        this.value=Long.decode(this.hex);
    }

    String description;
    String hex;
    long value;

    public static OPCCode getFromLong(long value)
    {
        for(OPCCode exist:values())
        {
            if(exist.getValue()==value)
                return exist;
        }
        // Try also masking low 6 bytes
        // In case vendor has provided status bits not defined in set
        long mask= 0x000000;
        long masked=value & mask;
        for(OPCCode exist:values())
        {
            if(exist.getValue()==masked)
                return exist;
        }
        return null;
    }

    public static OPCCode getFromHex(String hex)
    {
        String h= coherceHex(hex);
        for(OPCCode exist:values())
        {
            if(exist.getHex().equals(h))
                return exist;
        }
        return null;
    }

    static String coherceHex(String hex)
    {
        // Pad if necessary
        StringBuilder bhex;
        if(!hex.startsWith("0x"))
            bhex=new StringBuilder("0x"+hex);
        else
            bhex=new StringBuilder(hex);
        while(bhex.length()<10) {
            bhex.append("0");
        }
        return bhex.toString().substring(0,10); // Limit to 10 characters
    }

    @Override
    public String getDescription()
    {
        return this.description;
    }

    public long getValue()
    {
        return value;
    }

    public String getHex()
    {
        return hex;
    }

    public int getQualityBits()
    {
        return (int)(value >> 24);
    }

    public long getSubstatusBits()
    {
        long mask=0x00111111;
        return value & mask;
    }

    public OPCQuality getQuality()
    {
        return OPCQuality.getFromInt(getQualityBits());
    }
}

